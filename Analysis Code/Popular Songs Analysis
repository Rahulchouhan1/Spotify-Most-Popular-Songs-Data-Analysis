{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "421eeab4-4feb-429d-9973-f99710fa1cf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "fe857811-8565-4ae8-b96b-703dd76cc4fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>track_id</th>\n",
       "      <th>track_name</th>\n",
       "      <th>track_artist</th>\n",
       "      <th>track_popularity</th>\n",
       "      <th>track_album_release_date</th>\n",
       "      <th>playlist_genre</th>\n",
       "      <th>danceability</th>\n",
       "      <th>energy</th>\n",
       "      <th>key</th>\n",
       "      <th>...</th>\n",
       "      <th>track_artist_merged</th>\n",
       "      <th>lyrics</th>\n",
       "      <th>artist_name</th>\n",
       "      <th>tags</th>\n",
       "      <th>tags_tokenized</th>\n",
       "      <th>doc_vector</th>\n",
       "      <th>combined_vector</th>\n",
       "      <th>cluster</th>\n",
       "      <th>image_url</th>\n",
       "      <th>spotify_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>6oJ6le65B3SEqPwMRNXWjY</td>\n",
       "      <td>higher love</td>\n",
       "      <td>Kygo</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>2019-06-28</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.632680</td>\n",
       "      <td>0.667346</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>...</td>\n",
       "      <td>kygo</td>\n",
       "      <td>['bring', 'me', 'higher', 'love,', 'love', '',...</td>\n",
       "      <td>Kygo</td>\n",
       "      <td>bring higher love love bring higher love think...</td>\n",
       "      <td>['bring', 'higher', 'love', 'love', 'bring', '...</td>\n",
       "      <td>[-0.1148182   0.27755967  0.27891365  0.143460...</td>\n",
       "      <td>[-0.1148182   0.27755967  0.27891365  0.143460...</td>\n",
       "      <td>3</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b2737c8977...</td>\n",
       "      <td>https://open.spotify.com/track/6oJ6le65B3SEqPw...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3yNZ5r3LKfdmjoS3gkhUCT</td>\n",
       "      <td>bad guy (with justin bieber)</td>\n",
       "      <td>Billieeilish</td>\n",
       "      <td>0.318182</td>\n",
       "      <td>2019-07-11</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.602614</td>\n",
       "      <td>0.425904</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>billie eilish</td>\n",
       "      <td>['yeah,', 'yeah', '', 'oh,', 'ah', '', 'white'...</td>\n",
       "      <td>Billie Eilish</td>\n",
       "      <td>yeah yeah oh ah white shirt red bloody nose sl...</td>\n",
       "      <td>['yeah', 'yeah', 'oh', 'ah', 'white', 'shirt',...</td>\n",
       "      <td>[-2.95320839e-01 -2.59309914e-03  3.84592146e-...</td>\n",
       "      <td>[-2.95320839e-01 -2.59309914e-03  3.84592146e-...</td>\n",
       "      <td>1</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b273a69b8b...</td>\n",
       "      <td>https://open.spotify.com/track/3yNZ5r3LKfdmjoS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0qc4QlcCxVTGyShurEv1UU</td>\n",
       "      <td>post malone (feat. rani)</td>\n",
       "      <td>Samfeldt</td>\n",
       "      <td>0.318182</td>\n",
       "      <td>2019-05-24</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.498039</td>\n",
       "      <td>0.628716</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>...</td>\n",
       "      <td>sam feldt</td>\n",
       "      <td>['one', 'more', 'drink,', 'got', 'one', 'more'...</td>\n",
       "      <td>Sam Feldt</td>\n",
       "      <td>one drink got one bacardi one dance afterparty...</td>\n",
       "      <td>['one', 'drink', 'got', 'one', 'bacardi', 'one...</td>\n",
       "      <td>[-0.1616459   0.21872164  0.3755187   0.116120...</td>\n",
       "      <td>[-0.1616459   0.21872164  0.37551871  0.116120...</td>\n",
       "      <td>3</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b27354de16...</td>\n",
       "      <td>https://open.spotify.com/track/0qc4QlcCxVTGySh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4PkIDTPGedm0enzdvilLNd</td>\n",
       "      <td>sixteen</td>\n",
       "      <td>Elliegoulding</td>\n",
       "      <td>0.227273</td>\n",
       "      <td>2019-04-12</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.601307</td>\n",
       "      <td>0.799335</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>...</td>\n",
       "      <td>ellie goulding</td>\n",
       "      <td>['(sixteen)', '', '(sixteen)', '', 'do', 'you'...</td>\n",
       "      <td>Ellie Goulding</td>\n",
       "      <td>sixteen sixteen remember moved mum said love s...</td>\n",
       "      <td>['sixteen', 'sixteen', 'remember', 'moved', 'm...</td>\n",
       "      <td>[-0.17123666  0.15697554  0.2319686   0.190121...</td>\n",
       "      <td>[-0.17123666  0.15697554  0.2319686   0.190121...</td>\n",
       "      <td>3</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b27394181f...</td>\n",
       "      <td>https://open.spotify.com/track/4PkIDTPGedm0enz...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>5PYQUBXc7NYeI1obMKSJK0</td>\n",
       "      <td>never really over</td>\n",
       "      <td>Katyperry</td>\n",
       "      <td>0.409091</td>\n",
       "      <td>2019-05-31</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.886254</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>...</td>\n",
       "      <td>katy perry</td>\n",
       "      <td>[\"i'm\", 'losing', 'my', 'self', 'control', '',...</td>\n",
       "      <td>Katy Perry</td>\n",
       "      <td>im losing self control yeah youre starting tri...</td>\n",
       "      <td>['im', 'losing', 'self', 'control', 'yeah', 'y...</td>\n",
       "      <td>[-0.26988247  0.21529263  0.3686135   0.180054...</td>\n",
       "      <td>[-0.26988247  0.21529263  0.36861351  0.180054...</td>\n",
       "      <td>3</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b2739bea3b...</td>\n",
       "      <td>https://open.spotify.com/track/5PYQUBXc7NYeI1o...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                track_id                    track_name  \\\n",
       "0           0  6oJ6le65B3SEqPwMRNXWjY                   higher love   \n",
       "1           1  3yNZ5r3LKfdmjoS3gkhUCT  bad guy (with justin bieber)   \n",
       "2           2  0qc4QlcCxVTGyShurEv1UU      post malone (feat. rani)   \n",
       "3           3  4PkIDTPGedm0enzdvilLNd                       sixteen   \n",
       "4           4  5PYQUBXc7NYeI1obMKSJK0             never really over   \n",
       "\n",
       "    track_artist  track_popularity track_album_release_date playlist_genre  \\\n",
       "0           Kygo          0.500000               2019-06-28            Pop   \n",
       "1   Billieeilish          0.318182               2019-07-11            Pop   \n",
       "2       Samfeldt          0.318182               2019-05-24            Pop   \n",
       "3  Elliegoulding          0.227273               2019-04-12            Pop   \n",
       "4      Katyperry          0.409091               2019-05-31            Pop   \n",
       "\n",
       "   danceability    energy       key  ...  track_artist_merged  \\\n",
       "0      0.632680  0.667346  0.727273  ...                 kygo   \n",
       "1      0.602614  0.425904  0.000000  ...        billie eilish   \n",
       "2      0.498039  0.628716  0.636364  ...            sam feldt   \n",
       "3      0.601307  0.799335  0.727273  ...       ellie goulding   \n",
       "4      0.733333  0.886254  0.727273  ...           katy perry   \n",
       "\n",
       "                                              lyrics     artist_name  \\\n",
       "0  ['bring', 'me', 'higher', 'love,', 'love', '',...            Kygo   \n",
       "1  ['yeah,', 'yeah', '', 'oh,', 'ah', '', 'white'...   Billie Eilish   \n",
       "2  ['one', 'more', 'drink,', 'got', 'one', 'more'...       Sam Feldt   \n",
       "3  ['(sixteen)', '', '(sixteen)', '', 'do', 'you'...  Ellie Goulding   \n",
       "4  [\"i'm\", 'losing', 'my', 'self', 'control', '',...      Katy Perry   \n",
       "\n",
       "                                                tags  \\\n",
       "0  bring higher love love bring higher love think...   \n",
       "1  yeah yeah oh ah white shirt red bloody nose sl...   \n",
       "2  one drink got one bacardi one dance afterparty...   \n",
       "3  sixteen sixteen remember moved mum said love s...   \n",
       "4  im losing self control yeah youre starting tri...   \n",
       "\n",
       "                                      tags_tokenized  \\\n",
       "0  ['bring', 'higher', 'love', 'love', 'bring', '...   \n",
       "1  ['yeah', 'yeah', 'oh', 'ah', 'white', 'shirt',...   \n",
       "2  ['one', 'drink', 'got', 'one', 'bacardi', 'one...   \n",
       "3  ['sixteen', 'sixteen', 'remember', 'moved', 'm...   \n",
       "4  ['im', 'losing', 'self', 'control', 'yeah', 'y...   \n",
       "\n",
       "                                          doc_vector  \\\n",
       "0  [-0.1148182   0.27755967  0.27891365  0.143460...   \n",
       "1  [-2.95320839e-01 -2.59309914e-03  3.84592146e-...   \n",
       "2  [-0.1616459   0.21872164  0.3755187   0.116120...   \n",
       "3  [-0.17123666  0.15697554  0.2319686   0.190121...   \n",
       "4  [-0.26988247  0.21529263  0.3686135   0.180054...   \n",
       "\n",
       "                                     combined_vector  cluster  \\\n",
       "0  [-0.1148182   0.27755967  0.27891365  0.143460...        3   \n",
       "1  [-2.95320839e-01 -2.59309914e-03  3.84592146e-...        1   \n",
       "2  [-0.1616459   0.21872164  0.37551871  0.116120...        3   \n",
       "3  [-0.17123666  0.15697554  0.2319686   0.190121...        3   \n",
       "4  [-0.26988247  0.21529263  0.36861351  0.180054...        3   \n",
       "\n",
       "                                           image_url  \\\n",
       "0  https://i.scdn.co/image/ab67616d0000b2737c8977...   \n",
       "1  https://i.scdn.co/image/ab67616d0000b273a69b8b...   \n",
       "2  https://i.scdn.co/image/ab67616d0000b27354de16...   \n",
       "3  https://i.scdn.co/image/ab67616d0000b27394181f...   \n",
       "4  https://i.scdn.co/image/ab67616d0000b2739bea3b...   \n",
       "\n",
       "                                         spotify_url  \n",
       "0  https://open.spotify.com/track/6oJ6le65B3SEqPw...  \n",
       "1  https://open.spotify.com/track/3yNZ5r3LKfdmjoS...  \n",
       "2  https://open.spotify.com/track/0qc4QlcCxVTGySh...  \n",
       "3  https://open.spotify.com/track/4PkIDTPGedm0enz...  \n",
       "4  https://open.spotify.com/track/5PYQUBXc7NYeI1o...  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"songs.csv\",parse_dates=[\"track_album_release_date\"])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "02dc9cc5-d27e-43bb-8109-54d8f535730f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\91992\\AppData\\Local\\Temp\\ipykernel_10944\\1110558538.py:1: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
      "  data['track_album_release_date'] = pd.to_datetime(data['track_album_release_date'], errors='coerce', infer_datetime_format=True)\n"
     ]
    }
   ],
   "source": [
    "data['track_album_release_date'] = pd.to_datetime(data['track_album_release_date'], errors='coerce', infer_datetime_format=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "35776160-6a50-468a-93f3-a03592cfc7fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "468"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"track_artist\"].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afef08f8-7025-4cf8-b70e-48e4572eb646",
   "metadata": {},
   "source": [
    "# Data Filtering and Aggregation:\n",
    "- List the top 10 most popular songs based on popularity score.\n",
    "- Find all songs by a specific artist (e.g., \"Drake\").\n",
    "- Find the artist with the highest number of songs in the dataset.\n",
    "- Get the average popularity score of songs released after 2020.\n",
    "- Find the top 5 artists whose songs have the highest average danceability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "217cc2ce-f5bd-4874-acf4-10dd10bb070e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>track_name</th>\n",
       "      <th>artist_name</th>\n",
       "      <th>track_popularity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>429</th>\n",
       "      <td>the box</td>\n",
       "      <td>Roddy Ricch</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>memories</td>\n",
       "      <td>Maroon 5</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>blinding lights</td>\n",
       "      <td>The Weeknd</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>tusa</td>\n",
       "      <td>KAROL G</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>falling</td>\n",
       "      <td>Trevor Daniel</td>\n",
       "      <td>0.954545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>don't start now</td>\n",
       "      <td>Dua Lipa</td>\n",
       "      <td>0.954545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>everything i wanted</td>\n",
       "      <td>Billie Eilish</td>\n",
       "      <td>0.954545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>ritmo (bad boys for life)</td>\n",
       "      <td>The Black Eyed Peas</td>\n",
       "      <td>0.909091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>yummy</td>\n",
       "      <td>Justin Bieber</td>\n",
       "      <td>0.863636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>bad guy</td>\n",
       "      <td>Billie Eilish</td>\n",
       "      <td>0.863636</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    track_name          artist_name  track_popularity\n",
       "429                    the box          Roddy Ricch          1.000000\n",
       "95                    memories             Maroon 5          1.000000\n",
       "96             blinding lights           The Weeknd          1.000000\n",
       "77                        tusa              KAROL G          1.000000\n",
       "388                    falling        Trevor Daniel          0.954545\n",
       "154            don't start now             Dua Lipa          0.954545\n",
       "79         everything i wanted        Billie Eilish          0.954545\n",
       "21   ritmo (bad boys for life)  The Black Eyed Peas          0.909091\n",
       "82                       yummy        Justin Bieber          0.863636\n",
       "52                     bad guy        Billie Eilish          0.863636"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['track_name', 'artist_name', 'track_popularity']].sort_values(by=\"track_popularity\",ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4905bebf-ab2e-4bc3-9758-8abdd40a8227",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>track_id</th>\n",
       "      <th>track_name</th>\n",
       "      <th>track_artist</th>\n",
       "      <th>track_popularity</th>\n",
       "      <th>track_album_release_date</th>\n",
       "      <th>playlist_genre</th>\n",
       "      <th>danceability</th>\n",
       "      <th>energy</th>\n",
       "      <th>key</th>\n",
       "      <th>...</th>\n",
       "      <th>track_artist_merged</th>\n",
       "      <th>lyrics</th>\n",
       "      <th>artist_name</th>\n",
       "      <th>tags</th>\n",
       "      <th>tags_tokenized</th>\n",
       "      <th>doc_vector</th>\n",
       "      <th>combined_vector</th>\n",
       "      <th>cluster</th>\n",
       "      <th>image_url</th>\n",
       "      <th>spotify_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>369</th>\n",
       "      <td>369</td>\n",
       "      <td>2G7V7zsVDxg1yRsu7Ew9RJ</td>\n",
       "      <td>in my feelings</td>\n",
       "      <td>Drake</td>\n",
       "      <td>0.318182</td>\n",
       "      <td>2018-06-29</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.818301</td>\n",
       "      <td>0.611546</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>...</td>\n",
       "      <td>drake</td>\n",
       "      <td>['trap,', 'trapmoneybenny', '', 'this', 'shit'...</td>\n",
       "      <td>Drake</td>\n",
       "      <td>trap trapmoneybenny shit got feelings got ta r...</td>\n",
       "      <td>['trap', 'trapmoneybenny', 'shit', 'got', 'fee...</td>\n",
       "      <td>[-0.12342313  0.15873267  0.30500984  0.103762...</td>\n",
       "      <td>[-0.12342313  0.15873267  0.30500984  0.103762...</td>\n",
       "      <td>1</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b273f907de...</td>\n",
       "      <td>https://open.spotify.com/track/2G7V7zsVDxg1yRs...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>370</th>\n",
       "      <td>370</td>\n",
       "      <td>6DCZcSspjsKoFjzjrWoCdn</td>\n",
       "      <td>god's plan</td>\n",
       "      <td>Drake</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>2018-06-29</td>\n",
       "      <td>Pop</td>\n",
       "      <td>0.712418</td>\n",
       "      <td>0.421612</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>...</td>\n",
       "      <td>drake</td>\n",
       "      <td>['yeah,', 'they', \"wishin'\", 'and', \"wishin'\",...</td>\n",
       "      <td>Drake</td>\n",
       "      <td>yeah wishin wishin wishin wishin wishin yuh mo...</td>\n",
       "      <td>['yeah', 'wishin', 'wishin', 'wishin', 'wishin...</td>\n",
       "      <td>[-1.76206037e-01  7.59527460e-02  3.18630725e-...</td>\n",
       "      <td>[-1.76206037e-01  7.59527460e-02  3.18630725e-...</td>\n",
       "      <td>3</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b273f907de...</td>\n",
       "      <td>https://open.spotify.com/track/6DCZcSspjsKoFjz...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>463</td>\n",
       "      <td>5r7WvQtyPfy1xch5zMgGRp</td>\n",
       "      <td>behind barz - bonus</td>\n",
       "      <td>Drake</td>\n",
       "      <td>0.045455</td>\n",
       "      <td>2019-09-13</td>\n",
       "      <td>Rap</td>\n",
       "      <td>0.843137</td>\n",
       "      <td>0.534285</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>...</td>\n",
       "      <td>drake</td>\n",
       "      <td>['yeah', '', 'look', '', 'you', 'know', 'how',...</td>\n",
       "      <td>Drake</td>\n",
       "      <td>yeah look know paigon chitchat goes like rs vs...</td>\n",
       "      <td>['yeah', 'look', 'know', 'paigon', 'chitchat',...</td>\n",
       "      <td>[-0.16641462  0.06958088  0.24893339  0.166616...</td>\n",
       "      <td>[-1.66414618e-01  6.95808828e-02  2.48933390e-...</td>\n",
       "      <td>3</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b27306d32e...</td>\n",
       "      <td>https://open.spotify.com/track/5r7WvQtyPfy1xch...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>468</td>\n",
       "      <td>5ry2OE6R2zPQFDO85XkgRb</td>\n",
       "      <td>money in the grave (drake ft. rick ross)</td>\n",
       "      <td>Drake</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>2019-06-15</td>\n",
       "      <td>Rap</td>\n",
       "      <td>0.813072</td>\n",
       "      <td>0.478485</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>...</td>\n",
       "      <td>drake</td>\n",
       "      <td>['yeah,', 'okay', '', \"lil'\", 'cc', 'on', 'the...</td>\n",
       "      <td>Drake</td>\n",
       "      <td>yeah okay lil cc beat mmm yeah yeah mean fuck ...</td>\n",
       "      <td>['yeah', 'okay', 'lil', 'cc', 'beat', 'mmm', '...</td>\n",
       "      <td>[-1.90755129e-01 -2.13792250e-02  3.19874644e-...</td>\n",
       "      <td>[-1.90755129e-01 -2.13792250e-02  3.19874644e-...</td>\n",
       "      <td>4</td>\n",
       "      <td>https://i.scdn.co/image/ab67616d0000b2733f3b65...</td>\n",
       "      <td>https://open.spotify.com/track/5ry2OE6R2zPQFDO...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0                track_id  \\\n",
       "369         369  2G7V7zsVDxg1yRsu7Ew9RJ   \n",
       "370         370  6DCZcSspjsKoFjzjrWoCdn   \n",
       "463         463  5r7WvQtyPfy1xch5zMgGRp   \n",
       "468         468  5ry2OE6R2zPQFDO85XkgRb   \n",
       "\n",
       "                                   track_name track_artist  track_popularity  \\\n",
       "369                            in my feelings        Drake          0.318182   \n",
       "370                                god's plan        Drake          0.454545   \n",
       "463                       behind barz - bonus        Drake          0.045455   \n",
       "468  money in the grave (drake ft. rick ross)        Drake          0.545455   \n",
       "\n",
       "    track_album_release_date playlist_genre  danceability    energy       key  \\\n",
       "369               2018-06-29            Pop      0.818301  0.611546  0.090909   \n",
       "370               2018-06-29            Pop      0.712418  0.421612  0.636364   \n",
       "463               2019-09-13            Rap      0.843137  0.534285  0.727273   \n",
       "468               2019-06-15            Rap      0.813072  0.478485  0.909091   \n",
       "\n",
       "     ...  track_artist_merged  \\\n",
       "369  ...                drake   \n",
       "370  ...                drake   \n",
       "463  ...                drake   \n",
       "468  ...                drake   \n",
       "\n",
       "                                                lyrics  artist_name  \\\n",
       "369  ['trap,', 'trapmoneybenny', '', 'this', 'shit'...        Drake   \n",
       "370  ['yeah,', 'they', \"wishin'\", 'and', \"wishin'\",...        Drake   \n",
       "463  ['yeah', '', 'look', '', 'you', 'know', 'how',...        Drake   \n",
       "468  ['yeah,', 'okay', '', \"lil'\", 'cc', 'on', 'the...        Drake   \n",
       "\n",
       "                                                  tags  \\\n",
       "369  trap trapmoneybenny shit got feelings got ta r...   \n",
       "370  yeah wishin wishin wishin wishin wishin yuh mo...   \n",
       "463  yeah look know paigon chitchat goes like rs vs...   \n",
       "468  yeah okay lil cc beat mmm yeah yeah mean fuck ...   \n",
       "\n",
       "                                        tags_tokenized  \\\n",
       "369  ['trap', 'trapmoneybenny', 'shit', 'got', 'fee...   \n",
       "370  ['yeah', 'wishin', 'wishin', 'wishin', 'wishin...   \n",
       "463  ['yeah', 'look', 'know', 'paigon', 'chitchat',...   \n",
       "468  ['yeah', 'okay', 'lil', 'cc', 'beat', 'mmm', '...   \n",
       "\n",
       "                                            doc_vector  \\\n",
       "369  [-0.12342313  0.15873267  0.30500984  0.103762...   \n",
       "370  [-1.76206037e-01  7.59527460e-02  3.18630725e-...   \n",
       "463  [-0.16641462  0.06958088  0.24893339  0.166616...   \n",
       "468  [-1.90755129e-01 -2.13792250e-02  3.19874644e-...   \n",
       "\n",
       "                                       combined_vector  cluster  \\\n",
       "369  [-0.12342313  0.15873267  0.30500984  0.103762...        1   \n",
       "370  [-1.76206037e-01  7.59527460e-02  3.18630725e-...        3   \n",
       "463  [-1.66414618e-01  6.95808828e-02  2.48933390e-...        3   \n",
       "468  [-1.90755129e-01 -2.13792250e-02  3.19874644e-...        4   \n",
       "\n",
       "                                             image_url  \\\n",
       "369  https://i.scdn.co/image/ab67616d0000b273f907de...   \n",
       "370  https://i.scdn.co/image/ab67616d0000b273f907de...   \n",
       "463  https://i.scdn.co/image/ab67616d0000b27306d32e...   \n",
       "468  https://i.scdn.co/image/ab67616d0000b2733f3b65...   \n",
       "\n",
       "                                           spotify_url  \n",
       "369  https://open.spotify.com/track/2G7V7zsVDxg1yRs...  \n",
       "370  https://open.spotify.com/track/6DCZcSspjsKoFjz...  \n",
       "463  https://open.spotify.com/track/5r7WvQtyPfy1xch...  \n",
       "468  https://open.spotify.com/track/5ry2OE6R2zPQFDO...  \n",
       "\n",
       "[4 rows x 28 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"artist_name\"] == \"Drake\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "049cf8b1-76e4-4e14-80d6-68b0b025957f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Billie Eilish', 19)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['artist_name'].value_counts().idxmax(), data['artist_name'].value_counts().max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "053b2d21-f8e6-449b-81ee-9c94d42b8b2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2636363636363637"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "songs_after_2019 = data[data[\"track_album_release_date\"].dt.year > 2019]\n",
    "songs_after_2019[\"track_popularity\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "093b9806-f9de-4c34-8568-ec173ca3b201",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>track_name</th>\n",
       "      <th>danceability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>bad bad bad (feat. lil baby)</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>552</th>\n",
       "      <td>baby (lil baby feat. dababy)</td>\n",
       "      <td>0.994771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>548</th>\n",
       "      <td>yes indeed</td>\n",
       "      <td>0.986928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>551</th>\n",
       "      <td>pure cocaine</td>\n",
       "      <td>0.986928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>517</th>\n",
       "      <td>don't rush (feat. headie one)</td>\n",
       "      <td>0.983007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        track_name  danceability\n",
       "495   bad bad bad (feat. lil baby)      1.000000\n",
       "552   baby (lil baby feat. dababy)      0.994771\n",
       "548                     yes indeed      0.986928\n",
       "551                   pure cocaine      0.986928\n",
       "517  don't rush (feat. headie one)      0.983007"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['track_name','danceability']].sort_values(by=\"danceability\",ascending=False).head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37c54fb1-0106-4ad3-8e81-70e203de64bd",
   "metadata": {},
   "source": [
    "# Feature Analysis:\n",
    "- Find the song with the highest and lowest energy score.\n",
    "- Get the average tempo of all songs.\n",
    "- Find the correlation between danceability and energy.\n",
    "- Find the song(s) with the longest duration.\n",
    "- Identify the most common key in which the songs are composed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "9ae981e2-a8f6-466b-8c4f-37ed7f73ea0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'track_id', 'track_name', 'track_artist',\n",
       "       'track_popularity', 'track_album_release_date', 'playlist_genre',\n",
       "       'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
       "       'acousticness', 'liveness', 'valence', 'tempo', 'duration_ms',\n",
       "       'track_artist_merged', 'lyrics', 'artist_name', 'tags',\n",
       "       'tags_tokenized', 'doc_vector', 'combined_vector', 'cluster',\n",
       "       'image_url', 'spotify_url'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "78d1224e-6b42-4a59-bcaa-17e739f11d3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>track_name</th>\n",
       "      <th>track_artist</th>\n",
       "      <th>energy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>american idiot</td>\n",
       "      <td>Greenday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         track_name track_artist  energy\n",
       "285  american idiot     Greenday     1.0"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"track_name\",\"track_artist\",\"energy\"]].sort_values(by=\"energy\",ascending=False).head(1) # Highest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "1b46847e-9a3c-4b1a-b013-b0c69060b18b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>track_name</th>\n",
       "      <th>track_artist</th>\n",
       "      <th>energy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>846</th>\n",
       "      <td>listen before i go</td>\n",
       "      <td>Billieeilish</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             track_name  track_artist  energy\n",
       "846  listen before i go  Billieeilish     0.0"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"track_name\",\"track_artist\",\"energy\"]].sort_values(by=\"energy\",ascending=True).head(1) # Lowest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "bb342dba-cf9a-4e56-a82b-b396129e210a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.41470880651982134"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['tempo'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "27d48e2c-5aaa-478d-93c0-fe7259abce5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>danceability</th>\n",
       "      <th>energy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>danceability</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.031289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>energy</th>\n",
       "      <td>0.031289</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              danceability    energy\n",
       "danceability      1.000000  0.031289\n",
       "energy            0.031289  1.000000"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['danceability', 'energy']].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "e6397717-9c62-4b12-80b2-715c48753adc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>track_name</th>\n",
       "      <th>duration_ms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>mirrors</td>\n",
       "      <td>484147</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    track_name  duration_ms\n",
       "147    mirrors       484147"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"track_name\",\"duration_ms\"]].sort_values(by=\"duration_ms\",ascending=False).head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "b50ba457-0e82-48f2-8a47-99b2c0eb4e86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0909090909090909"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['key'].mode()[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c89544d-40f9-4a7f-bfe3-d1b38a5502d0",
   "metadata": {},
   "source": [
    "# Advanced Analysis:\n",
    "- Group the dataset by artists and count the number of songs per artist.\n",
    "- Find the artist whose songs have the highest average loudness.\n",
    "- Check if there is a relationship between song duration and popularity.\n",
    "- Create a histogram of song durations.\n",
    "- Find the average instrumentalness of songs by year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "8a1ab6cb-7e31-4039-9dfc-a8c60d903c67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "artist_name\n",
       "Billie Eilish    19\n",
       "Ariana Grande    12\n",
       "Khalid            8\n",
       "Calvin Harris     8\n",
       "The Weeknd        7\n",
       "                 ..\n",
       "NAV               1\n",
       "Soulja Boy        1\n",
       "2Pac              1\n",
       "T-Pain            1\n",
       "SHAUN             1\n",
       "Name: count, Length: 468, dtype: int64"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['artist_name'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "7b558e42-7823-402e-9615-7eca395da8e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dj Guuga'"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('artist_name')['loudness'].mean().idxmax()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "6ab8911e-3a52-456e-b812-980b19a05842",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_ms</th>\n",
       "      <th>track_popularity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>duration_ms</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.126763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>track_popularity</th>\n",
       "      <td>-0.126763</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  duration_ms  track_popularity\n",
       "duration_ms          1.000000         -0.126763\n",
       "track_popularity    -0.126763          1.000000"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['duration_ms', 'track_popularity']].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "38a224c0-5f72-4c29-88fd-6f4a43fd919b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data['duration_ms'], bins=30, edgecolor='black')\n",
    "plt.xlabel('Duration (ms)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Song Durations')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f92f0a7-e01d-4bef-9abf-eeb138ff3a5b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38700c9e-d019-41c3-919b-554acbf6c324",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
